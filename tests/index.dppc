;using.system;;using.samp;;using.console;;;pragma::option.allspc,true;;;pragma::option.warnings,default;;;const*new.bool,DEBUG_OPTION=false;;;pragma::option.debug,DEBUG_OPTION;;;#include:test;;;system.rem("Basic println example.");;console.println("Hual is a fucking bitch");;;public&form.testfunc;;{;;console.println("testfunc works.");;console.println("testfunc works.");;};;;public&form.NewTestFunc;;{;;console.println("OH YEAH MAN");;};;;user.testfunc;;user.NewTestFunc;;;system.rem("=================== NATIVES ===================");;;system.rem("a_samp for D++");;;const*new.int,MAX_PLAYERS=1000;;const*new.int,MAX_ACTORS=1000;;const*new.int,MAX_VEHICLES=2000;;;samp.SetGameModeText("d++ test");;samp.SetMaxPlayers(MAX_PLAYERS);;;system.rem("===================FUNCS===================");;;public&form.testFunc;;{;;console.println("testFunc was called.");;return.str,"testFunc returned this.";;};;;const*new.str,LMAO="Lmao";;;public&form.disableDebug;;{;;console.println("Debug disabled");;return.str,LMAO;;};;;console.println(testFunc);;console.println(disableDebug);;;system.rem("===================CALLBACKS===================");;;;auto&form.main;;{;;console.println("Hello World from main");;return.int,1;;};;;auto&form.OnGameModeInit;;{;;console.println("OnGameModeInit works");;return.int,1;;console.println("RETURN FAILED");;console.println("OMG LOL HAHAHAH RETURN DOES NOT WORK");;};;;hook&form.OnGameModeInit;;{;;console.println("OnGameModeInit works twice!!!");;return.int,1;;};;;auto&form.OnGameModeExit;;{;;console.println("OnGameModeExit works");;return.bool,true;;};;;#include:vars;;#include:math;;#include:class;;#include:args;;#include:discord;;#include:files;;#include:inline;;#include:tasks;;#include:struct;;#include:iter;;#include:data;console.println("Test is imported.");;;console.println("interesting...");;;const*new.str,TEST_STRING="TEST_STRING value works!";;;console.println(TEST_STRING);;;const*new.str,OMG="OMG actually works";;console.println.log(OMG);new.str,myvar="myvar::worked.";;;console.println(myvar);;;set.str,myvar="myvar::worked again.";;;console.println(myvar);;;if.equ,1,1->console.println("1 is 1");;if.notequ,2,1->console.println("2 is not 1");;if.notequ,1,1->console.println("1 is not 1");;if.equ,1,100->console.println("1 is 100");;;if.equ,myvar,"myvar::worked."->console.println(myvar);;if.equ,false,true->console.println("false is equal to true");;;;public&form.functobehooked?arg1&arg2&arg3;;{;;console.println("HOOKED");;return.int,1;;};;;hook&form.functobehooked;;{;;console.println("HOOKED 1");;return.int,1;;};;;hook&form.functobehooked;;{;;console.println("HOOKED 2");;return.int,1;;};;;user.functobehooked("oh lol",1,false);;;;public&form.arginit_test?playerid&string;;{;;};;;system.arginit(arginit_test,1,"Hello!");using.math;;;console.cout(1+1);;console.cout(111/111);;console.cout(2*2);;console.cout(2^2);;console.cout(2-2);;;if.equ,5/5,1+0->console.println("Math test passed!");;;new.int,MATHVAR=1+1;;console.cout(MATHVAR);;;new.int,MATHVAR22=6+MATHVAR;;console.cout(MATHVAR22);;public&class.dogInfo;;<;;new.str,name="Alexander";;;const*new.int,age=15;;;public&form.dogRace;;{;;	console.println("This is a bulldog.");;	return.int,1;;};;>;;;console.println(dogInfo:name);;user.dogInfo:dogRace;;;console.cout(dogInfo:age);;;public&class.manInfo;;<;;new.str,name="Alex";;>;;;hook&class.dogInfo;;<;;new.str,owner="Tommy";;>;;;console.println(dogInfo:owner);;;if.equ,1,1->set.str,dogInfo:owner="Y_Less";;;console.println(dogInfo:owner);;;hook&class.manInfo;;<;;new.int,age=86;;>;;;console.println(manInfo:name);;console.cout(manInfo:age);;public&form.form?text;;{;;console.println(text@form);;return.str,text@form;;};;;user.form("Argument passed to a function!");;;system.arginit(form,"Argument passed to a function again!");;console.println(form);;;if.equ,1+1,2->if.notequ,1,2->console.println("Biggest if test passed");;console.println("Discord was included");;;using*api.discord;;;native&form.discord_bot_send_message;;;auto&form.discord_init;;{;;console.println("discord_init called");;discord.discord_bot_send_message(1012320061278662696,"THIS WAS SENT FROM D++!!!");;return.int,1;;};;;console.println("Discord was included again?");;;new.str,test="test succedeed";;const*new.int,test2=1;;new.str,test3="hmmm {test}";;pragma::option.ctrlchar,*;;;console.println("{test2}st format test: {test} *, {test3}");;;public&form.dppprint?message;;{;;console.println(message@dppprint);;return.int,1;;};;;user.dppprint("{test}");;;;new.int,testvar=0;;while.notequ,testvar,10->set.int,testvar=testvar+1&console.println("{testvar}");;;while.equ,testvar,10->set.int,testvar=testvar+1&console.println("This should be printed only once!");;;if.equ,1,1->while.equ,testvar,11->set.int,testvar=testvar+1&console.println("This should be printed again!");;console.println("Files included");;;using.files;;;files.open_for_write("testfile.omg");;files.write("wrote this nigga");;files.close;;;files.open_for_read("testfile.omg");;new.str,myvar_to_test_files="This should not be here";;files.read(myvar_to_test_files);;console.println("{myvar_to_test_files}");;files.close;;;files.delete("newfile.omg");;files.open_for_append("newfile.omg");;files.write("first line");;files.write("second line");;files.write("third line");;files.close;;;new.int,testintagainomg__aa=364;;;console.println("{testintagainomg__aa}");;;public&form.FILES_TEST_FORM?text;;{;;console.println(text@FILES_TEST_FORM);;};;;user.FILES_TEST_FORM("Funny thing");;;public&form.returntest;;{;;console.println("Hello Worlddddddddddd");;if.equ, 23, 13 -> return.int,1;;return.int,2134;;console.println("Return failed lmao");;};;;console.cout(returntest);;;;public&form.yieldreturntest;;{;;console.println("Hello Worlddddddd");;yield&return.str,"mega sexy return";;if.notequ,1,1->yield&return.str,"HOOOOOOOOOOOOOO";;console.println("Yield Return WORKS!");;};;;console.println(yieldreturntest);;;if.equ, 5 ,   5 ->console.println("Syntax works!");;;if . equ , 1, 1->console.println("OmG");;;system.rem("Example code");;new.int,syntax_test=1;;;public&form.whilelooptest;;{;;set.int,syntax_test=syntax_test+1;;console.println.log("{syntax_test} eeeeeeeeeeeeeeeeee");;};;;if.equ,1,1->while.notequ,syntax_test,11->user.whilelooptest;;;console.println.log("This is still runnin right? {syntax_test}");;;;;public&form.InlineTestFunc;;{;;new.int,formid=__proccessed_form_id;;console.println("'InlineTestFunc' is {formid}");;;inline&form.inlineformtest;;	do->console.println("Inline works.");;	do->console.println.log("The inline finally works!");;;user.inlineformtest;;user.inlineformtest;;user.inlineformtest;;user.inlineformtest;;yield&return.int,1;;};;;user.InlineTestFunc;;user.InlineTestFunc;public&task.testtask#1000;;{;;console.println("Task works!");;console.cout.log(1+1+2);;};;;public&task.anothersexytask#3000;;{;;console.println("Another task also works!");;samp.SendClientMessage(0,0,"Test client message");;};;;auto&form.OnPlayerConnect?playerid;;{;;samp.SendClientMessage(playerid@OnPlayerConnect,0,"Welcome to the D++ server");;};;;auto&form.OnPlayerDisconnect?playerid&reason;;{;;console.println("Player {playerid@OnPlayerDisconnect} disconnected | Reason: {reason@OnPlayerDisconnect}");;return.int,1;;};extern&struct*samp_command.testcmd?playerid&params;;{;;samp.SendClientMessage,playerid@testcmd,0,"Your command works!";;return.int,1;;};;;console.println("Struct test included!");;;new.int,forlooptestvar=0;;if.equ,1,1->for.int&var,forlooptestvar,10->console.println("For loop id {forlooptestvar}");;;if.gt,forlooptestvar,1->console.println("forlooptestvar *({forlooptestvar}*) is greater than 1");;if.lt,forlooptestvar,20->console.println("forlooptestvar *({forlooptestvar}*) is less than 20");;if.ge,forlooptestvar,10->console.println("forlooptestvar *({forlooptestvar}*) is greater or equal to 10");;if.le,forlooptestvar,10->console.println("forlooptestvar *({forlooptestvar}*) is greater or equal to 10");;if.gt,1,2->console.println("1 is greater than 2");;if.lt,2,1->console.println("2 is less than 1");;if.ge,1,2->console.println("1 is greater or equal to 2");;if.le,2,1->console.println("2 is less or equal to 1");;else->if.equ,1,1->console.println("Lmao else works!");;;;system.rem("Another else test");;;public&form.ElseTest;;{;;if.equ,1,2->console.println("1 and 2 are equal");;else->if.equ,2,3->console.println("2 and 3 are equal");;else->console.println("Nothing is equal");;;if.equ,1,1->console.println("1 and 1 are indeed equal");;else->console.println("This should not be printed");;;return.int,1;;};;;user.ElseTest;;;;if.equ,1,2->console.println("1 and 2 are equal");;else->if.equ,1,1->console.println("1 and 1 are equal");;else->console.println("Yay!!");;else->console.println("Yayy twice!");;;using.misc;;;new.int,misctest1=23;;new.int,misctest2=32;;;console.println("{misctest1} and {misctest2}");;;misc.swap(misctest1,misctest2);;;console.println("{misctest1} and {misctest2}");;;public&form.ForTest2?num;;{;;console.println("Damn for loop test {num@ForTest2}");;return.int,1;;};;;set.int,forlooptestvar=0;;for.int&var,forlooptestvar,5->user.ForTest2(forlooptestvar);;;iter::define,testiter,100;;new.int,foreachtestvar=0;;;iter::add,testiter,1;;iter::add,testiter,10;;iter::remove,testiter,1;;;foreach.int&var,foreachtestvar,testiter->console.println("foreach test {foreachtestvar}");;;iter::add,testiter,1;;;foreach.int&var,foreachtestvar,testiter->console.println("foreach test #2 {foreachtestvar}");;;console.cout.log(sizeof?testiter);;;iter::delete,testiter;;;console.cout(1);console.println("Lmao ok");;;public&class.IterClass;;<;;iter::define,iter,10;;>;;;iter::add,IterClass:iter,364;;foreach.int&var,foreachtestvar,IterClass:iter->console.println("foreach test #3 {foreachtestvar}");;;if.equ,defined?IterClass:iter,1->console.println("IterClass:iter is defined!");;if.equ,defined?IterClass:iter,0->console.println("IterClass:iter is NOT defined!");;if.equ,defined?foreachtestvar,1->console.println("foreachtestvar is defined!");;if.equ,defined?dummyvar,1->console.println.log("This should not be printed!!");;;new.int,switchtest=23;;switch,switchtest;;case,1->console.println("switchtest is 1");;case,23->console.println("switchtest is 23");;case,2->console.println.log("switchtest is 2");;;console.println.log("This should be in dpp.log in scriptfiles/");;;;form&method.TestMethod?text;;{;;console.println("Printed: {text@TestMethod}");;return.int,1;;};;;console.println.TestMethod("Method test #1");;;;public&class.MethodClass;;<;;form&method.TestMethod?text;;{;;	console.println.log("Printed: {text@MethodClass:TestMethod}");;	return.int,1;;};;>;;;console.println.MethodClass:TestMethod("Method test #2");;;;public&class.SAMP;;<;;iter::define,Player,MAX_PLAYERS;;>;;;hook&form.OnPlayerConnect?playerid;;{;;iter::add,SAMP:Player,playerid@OnPlayerConnect;;};;;hook&form.OnPlayerDisconnect?playerid;;{;;iter::remove,SAMP:Player,playerid@OnPlayerConnect;;};;;public&task.PrintPlayers#1000;;{;;foreach.int&var,foreachtestvar,SAMP:Player->console.println("foreach test #4 {foreachtestvar}");;;};;console.println.log("data.dpp is imported");;;using.data;;;new.str,scanftest1="ok";;new.str,scanftest2="ok";;new.str,scanftest3="ok";;new.str,scanftest4="ok";;new.int,scanftest5=2453;;new.int,scanftest6=2453;;;new.str,scanftest="sscanf-is-so-cool-1-2";;;data.sscanf(scanftest,scanftest1,scanftest2,scanftest3,scanftest4,scanftest5,scanftest6);;;console.println.log(scanftest1);;console.println.log(scanftest2);;console.println.log(scanftest3);;console.println.log(scanftest4);;console.cout(scanftest5);;console.cout(scanftest6);;;object,TestObj;;TestObj<-new.int,testvar=10;;;public&class.ObjectTest;;<;;object,TestObj;;>;;;ObjectTest:TestObj<-new.int,testvar=1;;;;;new.int,undeftest=1;;;if.equ,defined?undeftest,1->console.println.log("undeftest is defined");;;#undef:undeftest;;;if.equ,defined?undeftest,1->console.println.log("undeftest is defined *(again!*)");;;console.cout.log(10%3);