import::component.console;;;pragma::option.allspc,true;;;pragma::option.warnings,default;;;const::define.bool,DEBUG_OPTION,false;;;pragma::option.debug,DEBUG_OPTION;;;import::component.system;;import::component.samp;;import::module,"test";;;system.rem,"Basic println example.";;console.println,"Hual is a fucking bitch";;;public&form.testfunc;;do;;console.println,"testfunc works.";;console.println,"testfunc works.";;end;;;public&form.NewTestFunc;;do;;console.println,"OH YEAH MAN";;end;;;user.testfunc;;user.NewTestFunc;;;system.rem,"=================== NATIVES ===================";;;system.rem,"a_samp for D++";;;const::define.int,MAX_PLAYERS,1000;;const::define.int,MAX_ACTORS,1000;;const::define.int,MAX_VEHICLES,2000;;;samp.SetGameModeText,"d++ test";;samp.SetMaxPlayers,MAX_PLAYERS;;;system.rem,"===================FUNCS===================";;;public&form.testFunc;;do;;console.println,"testFunc was called.";;return.str,"testFunc returned this.";;end;;;const::define.str,LMAO,"Lmao";;;public&form.disableDebug;;do;;console.println,"Debug disabled";;return.str,LMAO;;end;;;console.println,testFunc;;console.println,disableDebug;;;system.rem,"===================CALLBACKS===================";;;;auto&form.main;;do;;console.println,"Hello World from main";;return.int,1;;end;;;auto&form.OnGameModeInit;;do;;console.println,"OnGameModeInit works";;return.int,1;;console.println,"RETURN FAILED";;console.println,"OMG LOL HAHAHAH RETURN DOES NOT WORK";;end;;;hook&form.OnGameModeInit;;do;;console.println,"OnGameModeInit works twice!!!";;return.int,1;;end;;;auto&form.OnGameModeExit;;do;;console.println,"OnGameModeExit works";;return.bool,true;;end;;;import::module,"vars";;import::module,"math";;import::module,"class";;import::module,"args";;import::module,"discord";;import::module,"files";;import::module,"inline";;import::module,"tasks";;import::module,"struct";;import::module,"iter";console.println,"Test is imported.";;;console.println,"interesting...";;;const::define.str,TEST_STRING,"TEST_STRING value works!";;;console.println,TEST_STRING;;;const::define.str,OMG,"OMG actually works";;console.println,OMG;var::define.str,myvar,"myvar::worked.";;;console.println,myvar;;;var::set.str,myvar,"myvar::worked again.";;;console.println,myvar;;;if.equ,1,1->console.println,"1 is 1";;if.notequ,2,1->console.println,"2 is not 1";;if.notequ,1,1->console.println,"1 is not 1";;if.equ,1,100->console.println,"1 is 100";;;if.equ,myvar,"myvar::worked."->console.println,myvar;;if.equ,false,true->console.println,"false is equal to true";;;;public&form.functobehooked?arg1&arg2&arg3;;do;;console.println,"HOOKED";;return.int,1;;end;;;hook&form.functobehooked;;do;;console.println,"HOOKED 1";;return.int,1;;end;;;hook&form.functobehooked;;do;;console.println,"HOOKED 2";;return.int,1;;end;;;user.functobehooked,"oh lol",1,false;;;;public&form.arginit_test?playerid&string;;do;;end;;;system.arginit,arginit_test,1,"Hello!";import::component.math;;;console.cout,add?1:1;;console.cout,div?111:111;;console.cout,mul?2:2;;console.cout,exp?2:2;;console.cout,sub?2:2;;;if.equ,div?5:5,add?1:0->console.println,"Math test passed!";;;var::define.int,MATHVAR,add?1:1;;console.cout,MATHVAR;;;var::define.int,MATHVAR22,add?6:MATHVAR;;console.cout,MATHVAR22;public&class.dogInfo;;do;;var::define.str,name,"Alexander";;;const::define.int,age,15;;;public&form.dogRace;;do;;	console.println,"This is a bulldog.";;	return.int,1;;end;;end;;;console.println,dogInfo:name;;user.dogInfo:dogRace;;;console.cout,dogInfo:age;;;public&class.manInfo;;do;;var::define.str,name,"Alex";;end;;;hook&class.dogInfo;;do;;var::define.str,owner,"Tommy";;end;;;console.println,dogInfo:owner;;;if.equ,1,1->var::set.str,dogInfo:owner,"Y_Less";;;console.println,dogInfo:owner;;;hook&class.manInfo;;do;;var::define.int,age,86;;end;;;console.println,manInfo:name;;console.cout,manInfo:age;public&form.form?text;;do;;console.println,text@form;;return.str,text@form;;end;;;user.form,"Argument passed to a function!";;;system.arginit,form,"Argument passed to a function again!";;console.println,form;;;if.equ,add?1:1,2->if.notequ,1,2->console.println,"Biggest if test passed";console.println,"Discord was included";;;import::api.discord;;;native&form.discord_bot_send_message;;;auto&form.discord_init;;do;;console.println,"discord_init called";;discord.discord_bot_send_message,1012320061278662696,"THIS WAS SENT FROM D++!!!";;return.int,1;;end;;;console.println,"Discord was included again?";;;var::define.str,test,"test succedeed";;const::define.int,test2,1;;var::define.str,test3,"hmmm {test}";;pragma::option.ctrlchar,*;;;console.println,"{test2}st format test: {test} *, {test3}";;;public&form.dppprint?message;;do;;console.println,message@dppprint;;return.int,1;;end;;;user.dppprint,"{test}";;;;var::define.int,testvar,0;;while.notequ,testvar,10->var::set.int,testvar,add?testvar:1&console.println,"{testvar}";;;while.equ,testvar,10->var::set.int,testvar,add?testvar:1&console.println,"This should be printed only once!";;;if.equ,1,1->while.equ,testvar,11->var::set.int,testvar,add?testvar:1&console.println,"This should be printed again!";;;console.println,"Files included";;;import::component.files;;;files.open_for_write,"testfile.omg";;files.write,"wrote this nigga";;files.close;;;files.open_for_read,"testfile.omg";;var::define.str,myvar_to_test_files,"This should not be here";;files.read,myvar_to_test_files;;console.println,"{myvar_to_test_files}";;files.close;;;files.delete,"newfile.omg";;files.open_for_append,"newfile.omg";;files.write,"first line";;files.write,"second line";;files.write,"third line";;files.close;;;var::define.int,testintagainomg__aa,364;;;console.println,"{testintagainomg__aa}";;;public&form.FILES_TEST_FORM?text;;do;;console.println,   text@FILES_TEST_FORM;;end;;;user.FILES_TEST_FORM,   "Funny thing"  ;;;public&form.returntest;;do;;console.println, "Hello Worlddddddddddd";;if.equ, 23, 13 -> return.int,1;;return.int,2134;;console.println, "Return failed lmao";;end;;;console.cout, returntest;;;;public&form.yieldreturntest;;do;;console.println, "Hello Worlddddddd";;yield&return.str,"mega sexy return";;if.notequ,1,1->yield&return.str,"HOOOOOOOOOOOOOO";;console.println, "Yield Return WORKS!";;end;;;console.println, yieldreturntest;;;if.equ, 5 ,   5 -> console.println,  "Syntax works!";;;if . equ , 1, 1-> console . println , "OmG" ;;;system.rem,"Example code";;var::define.int,syntax_test,1;;public&form.whilelooptest;;do;;var::set.int,syntax_test,add?syntax_test:1;;console.println,"{syntax_test} eeeeeeeeeeeeeeeeee";;end;;if.equ,1,1->while.notequ,syntax_test,11->user.whilelooptest;;;console.println,"This is still runnin right? {syntax_test}";;;public&form.InlineTestFunc;;do;;var::define.int,formid,__proccessed_form_id;;console.println,"'InlineTestFunc' is {formid}";;;InlineTestFunc*inline&form.inlineformtest;;do;;	console.println,"Inline works.";;end;;;using&inline::user.inlineformtest;;using&inline::user.inlineformtest;;using&inline::user.inlineformtest;;using&inline::user.inlineformtest;;yield&return.int,1;;end;;;user.InlineTestFunc;public&task.testtask#1000;;do;;console.println,"Task works!";;end;;;public&task.anothersexytask#3000;;do;;console.println,"Another task also works!";;samp.SendClientMessage,0,0,"Test client message";;end;;;auto&form.OnPlayerConnect?playerid;;do;;samp.SendClientMessage,playerid@OnPlayerConnect,0,"Welcome to the D++ server";;end;;;auto&form.OnPlayerDisconnect?playerid&reason;;do;;console.println,"Player {playerid@OnPlayerDisconnect} disconnected | Reason: {reason@OnPlayerDisconnect}";;return.int,1;;end;extern&struct*samp_command.testcmd?playerid&params;;do;;samp.SendClientMessage,playerid@testcmd,0,"Your command works!";;return.int,1;;end;;;console.println,"Struct test included!";;;var::define.int,forlooptestvar,0;;if.equ,1,1->for.int&var,forlooptestvar,10->console.println,"For loop id {forlooptestvar}";;;if.gt,forlooptestvar,1->console.println,"forlooptestvar ({forlooptestvar}) is greater than 1";;if.lt,forlooptestvar,20->console.println,"forlooptestvar ({forlooptestvar}) is less than 20";;if.ge,forlooptestvar,10->console.println,"forlooptestvar ({forlooptestvar}) is greater or equal to 10";;if.le,forlooptestvar,10->console.println,"forlooptestvar ({forlooptestvar}) is greater or equal to 10";;if.gt,1,2->console.println,"1 is greater than 2";;if.lt,2,1->console.println,"2 is less than 1";;if.ge,1,2->console.println,"1 is greater or equal to 2";;if.le,2,1->console.println,"2 is less or equal to 1";;else->if.equ,1,1->console.println,"Lmao else works!";;;;system.rem,"Another else test";;;public&form.ElseTest;;do;;if.equ,1,2->console.println,"1 and 2 are equal";;else->if.equ,2,3->console.println,"2 and 3 are equal";;else->console.println,"Nothing is equal";;;if.equ,1,1->console.println,"1 and 1 are indeed equal";;else->console.println,"This should not be printed";;;return.int,1;;end;;;user.ElseTest;;;;if.equ,1,2->console.println,"1 and 2 are equal";;else->if.equ,1,1->console.println,"1 and 1 are equal";;else->console.println,"Yay!!";;else->console.println,"Yayy twice!";;;import::component.misc;;;var::define.int,misctest1,23;;var::define.int,misctest2,32;;;console.println,"{misctest1} and {misctest2}";;;misc.swap,misctest1,misctest2;;;console.println,"{misctest1} and {misctest2}";;;public&form.ForTest2?num;;do;;console.println,"Damn for loop test {num@ForTest2}";;return.int,1;;end;;;var::set.int,forlooptestvar,0;;for.int&var,forlooptestvar,5->user.ForTest2,forlooptestvar;;iter::define,testiter,100;;var::define.int,foreachtestvar,0;;;iter::add,testiter,1;;iter::add,testiter,10;;iter::remove,testiter,1;;;foreach.int&var,foreachtestvar,testiter->console.println,"foreach test {foreachtestvar}";;;iter::add,testiter,1;;;foreach.int&var,foreachtestvar,testiter->console.println,"foreach test #2 {foreachtestvar}";;;console.cout,sizeof?testiter;;;iter::delete,testiter;;;console.cout,1;console.println,"Lmao ok";;;public&class.IterClass;;do;;iter::define,iter,10;;end;;;iter::add,IterClass:iter,364;;foreach.int&var,foreachtestvar,IterClass:iter->console.println,"foreach test #3 {foreachtestvar}";;