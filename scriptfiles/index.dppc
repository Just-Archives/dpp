;;using.system;;using.samp;;using.console;;;#pragma:allspc,true;;;#pragma:warnings,default;;;const*new.bool,DEBUG_OPTION=false;;;#pragma:debug,DEBUG_OPTION;;;console.println("========================== test.dpp ==========================");;;;console.println("Test is imported.");;;console.println("interesting...");;;const*new.str,TEST_STRING="TEST_STRING value works!";;;console.println(TEST_STRING);;;const*new.str,OMG="OMG actually works";;console.println.log(OMG);;;console.println.log("==========================================");;system.rem("Basic println example.");;console.println("Hual is a fucking bitch");;;void*form.testfunc;;{;;console.println("testfunc works.");;console.println("testfunc works.");;};;;void*form.NewTestFunc;;{;;console.println("OH YEAH MAN");;};;;user.testfunc;;user.NewTestFunc;;;system.rem("=================== NATIVES ===================");;;system.rem("a_samp for D++");;;const*new.int,MAX_PLAYERS=1000;;const*new.int,MAX_ACTORS=1000;;const*new.int,MAX_VEHICLES=2000;;;samp.SetGameModeText("d++ test");;samp.SetMaxPlayers(MAX_PLAYERS);;;system.rem("===================FUNCS===================");;;str*form.testFunc;;{;;console.println("testFunc was called.");;return,"testFunc returned this.";;};;;const*new.str,LMAO="Lmao";;;str*form.disableDebug;;{;;console.println("Debug disabled");;return,LMAO;;};;;console.println(testFunc);;console.println(disableDebug);;;system.rem("===================CALLBACKS===================");;;;extern&struct*public.main;;{;;console.println("Hello World from main");;return.int,1;;};;;extern&struct*public.OnGameModeInit;;{;;console.println("OnGameModeInit works");;return.int,1;;console.println("RETURN FAILED");;console.println("OMG LOL HAHAHAH RETURN DOES NOT WORK");;};;;hook&form.OnGameModeInit;;{;;console.println("OnGameModeInit works twice!!!");;return.int,1;;};;;extern&struct*public.OnGameModeExit;;{;;console.println("OnGameModeExit works");;return.bool,true;;};;;console.println("========================== vars.dpp ==========================");;new.str,myvar="myvar::worked.";;;console.println(myvar);;;set.str,myvar="myvar::worked again.";;;console.println(myvar);;;if.equ,1,1->console.println("1 is 1");;if.notequ,2,1->console.println("2 is not 1");;if.notequ,1,1->console.println("1 is not 1");;if.equ,1,100->console.println("1 is 100");;;if.equ,myvar,"myvar::worked."->console.println(myvar);;if.equ,false,true->console.println("false is equal to true");;;;int*form.functobehooked?arg1&arg2&arg3;;{;;console.println("HOOKED");;return,1;;};;;hook&form.functobehooked;;{;;console.println("HOOKED 1");;return.int,1;;};;;hook&form.functobehooked;;{;;console.println("HOOKED 2");;return.int,1;;};;;user.functobehooked("oh lol",1,false);;;;void*form.arginit_test?playerid&string;;{;;};;;system.arginit(arginit_test,1,"Hello!");console.println("========================== math.dpp ==========================");;using.math;;;console.cout(1+1);;console.cout(111/111);;console.cout(2*2);;console.cout(2^2);;console.cout(2-2);;;if.equ,5/5,1+0->console.println("Math test passed!");;;new.int,MATHVAR=1+1;;console.cout(MATHVAR);;;new.int,MATHVAR22=6+MATHVAR;;console.cout(MATHVAR22);;console.println("========================== class.dpp ==========================");;;namespace,dogInfo;;<;;new.str,name="Alexander";;;const*new.int,age=15;;;int*form.dogRace;;{;;	console.println("This is a bulldog.");;	return,1;;};;>;;;console.println(dogInfo::name);;user.dogInfo::dogRace;;;console.cout(dogInfo::age);;;namespace,manInfo;;<;;new.str,name="Alex";;>;;;using*namespace,dogInfo;;<;;new.str,owner="Tommy";;>;;;console.println(dogInfo::owner);;;if.equ,1,1->set.str,dogInfo::owner="Y_Less";;;console.println(dogInfo::owner);;;using*namespace,manInfo;;<;;new.int,age=86;;>;;;console.println(manInfo::name);;console.cout(manInfo::age);;console.println("========================== args.dpp ==========================");;;str*form.form?text;;{;;console.println(text@form);;return,text@form;;};;;user.form("Argument passed to a function!");;;system.arginit(form,"Argument passed to a function again!");;console.println(form);;;if.equ,1+1,2->if.notequ,1,2->console.println("Biggest if test passed");;console.println("========================== discord.dpp ==========================");;console.println("Discord was included");;;using.dppcord;;;extern&struct*public.discord_init;;{;;console.println("discord_init called");;dppcord.discord_bot_send_message(1012320061278662696,"THIS WAS SENT FROM D++!!!");;return.int,1;;};;;console.println("Discord was included again?");;;new.str,test="test succedeed";;const*new.int,test2=1;;new.str,test3="hmmm {test}";;#pragma:ctrlchar,*;;;console.println("{test2}st format test: {test} *, {test3}");;;int*form.dppprint?message;;{;;console.println(message@dppprint);;return.int,1;;};;;user.dppprint("{test}");;;;new.int,testvar=0;;while.notequ,testvar,10->set.int,testvar=testvar+1&console.println("{testvar}");;;while.equ,testvar,10->set.int,testvar=testvar+1&console.println("This should be printed only once!");;;if.equ,1,1->while.equ,testvar,11->set.int,testvar=testvar+1&console.println("This should be printed again!");;console.println("========================== files.dpp ==========================");;console.println("Files included");;;using.files;;;files.open_for_write("testfile.omg");;files.write("wrote this nigga");;files.close;;;files.open_for_read("testfile.omg");;new.str,myvar_to_test_files="This should not be here";;files.read(myvar_to_test_files);;console.println("{myvar_to_test_files}");;files.close;;;files.delete("newfile.omg");;files.open_for_append("newfile.omg");;files.write("first line");;files.write("second line");;files.write("third line");;files.close;;;new.int,testintagainomg__aa=364;;;console.println("{testintagainomg__aa}");;;void*form.FILES_TEST_FORM?text;;{;;console.println(text@FILES_TEST_FORM);;};;;user.FILES_TEST_FORM("Funny thing");;;int*form.returntest;;{;;console.println("Hello Worlddddddddddd");;if.equ, 23, 13 -> return.int,1;;return,2134;;console.println("Return failed lmao");;};;;console.cout(returntest);;;;str*form.yieldreturntest;;{;;console.println("Hello Worlddddddd");;yield&return,"mega sexy return";;if.notequ,1,1->yield&return,"HOOOOOOOOOOOOOO";;console.println("Yield Return WORKS!");;};;;console.println(yieldreturntest);;;if.equ, 5 ,   5 ->console.println("Syntax works!");;;if . equ , 1, 1->console.println("OmG");;;system.rem("Example code");;new.int,syntax_test=1;;;void*form.whilelooptest;;{;;set.int,syntax_test=syntax_test+1;;console.println.log("{syntax_test} eeeeeeeeeeeeeeeeee");;};;;if.equ,1,1->while.notequ,syntax_test,11->user.whilelooptest;;;console.println.log("This is still runnin right? {syntax_test}");;;console.println("========================== inline.dpp ==========================");;;int*form.InlineTestFunc;;{;;new.int,formid=__proccessed_form_id;;console.println("'InlineTestFunc' is {formid}");;;inline&form.inlineformtest;;	do->console.println("Inline works.");;	do->console.println.log("The inline finally works!");;;user.inlineformtest;;user.inlineformtest;;user.inlineformtest;;user.inlineformtest;;yield&return,1;;};;;user.InlineTestFunc;;user.InlineTestFunc;console.println("========================== tasks.dpp ==========================");;;public&task.testtask#1000;;{;;console.println("Task works!");;console.cout.log(1+1+2);;};;;public&task.anothersexytask#3000;;{;;console.println("Another task also works!");;samp.SendClientMessage(0,0,"Test client message");;};;;extern&struct*public.OnPlayerConnect?playerid;;{;;samp.SendClientMessage(playerid@OnPlayerConnect,0,"Welcome to the D++ server");;};;;extern&struct*public.OnPlayerDisconnect?playerid&reason;;{;;console.println("Player {playerid@OnPlayerDisconnect} disconnected | Reason: {reason@OnPlayerDisconnect}");;return.int,1;;};console.println("========================== struct.dpp ==========================");;;extern&struct*samp_command.testcmd?playerid&params;;{;;samp.SendClientMessage,playerid@testcmd,0,"Your command works!";;return.int,1;;};;;console.println("Struct test included!");;;new.int,forlooptestvar=0;;if.equ,1,1->for.int&var,forlooptestvar,10->console.println("For loop id {forlooptestvar}");;;if.gt,forlooptestvar,1->console.println("forlooptestvar *({forlooptestvar}*) is greater than 1");;if.lt,forlooptestvar,20->console.println("forlooptestvar *({forlooptestvar}*) is less than 20");;if.ge,forlooptestvar,10->console.println("forlooptestvar *({forlooptestvar}*) is greater or equal to 10");;if.le,forlooptestvar,10->console.println("forlooptestvar *({forlooptestvar}*) is greater or equal to 10");;if.gt,1,2->console.println("1 is greater than 2");;if.lt,2,1->console.println("2 is less than 1");;if.ge,1,2->console.println("1 is greater or equal to 2");;if.le,2,1->console.println("2 is less or equal to 1");;else->if.equ,1,1->console.println("Lmao else works!");;;;system.rem("Another else test");;;int*form.ElseTest;;{;;if.equ,1,2->console.println("1 and 2 are equal");;else->if.equ,2,3->console.println("2 and 3 are equal");;else->console.println("Nothing is equal");;;if.equ,1,1->console.println("1 and 1 are indeed equal");;else->console.println("This should not be printed");;;return,1;;};;;user.ElseTest;;;;if.equ,1,2->console.println("1 and 2 are equal");;else->if.equ,1,1->console.println("1 and 1 are equal");;else->console.println("Yay!!");;else->console.println("Yayy twice!");;;using.misc;;;new.int,misctest1=23;;new.int,misctest2=32;;;console.println("{misctest1} and {misctest2}");;;misc.swap(misctest1,misctest2);;;console.println("{misctest1} and {misctest2}");;;int*form.ForTest2?num;;{;;console.println("Damn for loop test {num@ForTest2}");;return,1;;};;;set.int,forlooptestvar=0;;for.int&var,forlooptestvar,5->user.ForTest2(forlooptestvar);;console.println("========================== iter.dpp ==========================");;iter::define,testiter,100;;new.int,foreachtestvar=0;;;iter::add,testiter,1;;iter::add,testiter,10;;iter::remove,testiter,1;;;foreach.int&var,foreachtestvar,testiter->console.println("foreach test {foreachtestvar}");;;iter::add,testiter,1;;;foreach.int&var,foreachtestvar,testiter->console.println("foreach test #2 {foreachtestvar}");;;console.cout.log(sizeof?testiter);;;#undef:testiter;;;console.cout(1);console.println("Lmao ok");;;namespace,IterClass;;<;;iter::define,iter,10;;>;;;iter::add,IterClass::iter,364;;foreach.int&var,foreachtestvar,IterClass::iter->console.println("foreach test #3 {foreachtestvar}");;;if.equ,defined?IterClass::iter,1->console.println("IterClass::iter is defined!");;if.equ,defined?IterClass::iter,0->console.println("IterClass::iter is NOT defined!");;if.equ,defined?foreachtestvar,1->console.println("foreachtestvar is defined!");;if.equ,defined?dummyvar,1->console.println.log("This should not be printed!!");;;new.int,switchtest=23;;switch,switchtest;;case,1->console.println("switchtest is 1");;case,23->console.println("switchtest is 23");;case,2->console.println.log("switchtest is 2");;;console.println.log("This should be in dpp.log in scriptfiles/");;;;form&method.TestMethod?text;;{;;console.println("Printed: {text@TestMethod}");;return.int,1;;};;;console.println.TestMethod("Method test #1");;;;namespace,MethodClass;;<;;form&method.TestMethod?text;;{;;	console.println.log("Printed: {text@MethodClass::TestMethod}");;	return.int,1;;};;>;;;;console.println.MethodClass::TestMethod("Method test #2");;;int*form.MegaFormBoo?text;;{;;console.println("{text@MegaFormBoo}");;return.int,1;;};;;user.MegaFormBoo("MegaFormBoo was sucessfully called");;;namespace,SAMP;;<;;iter::define,Player,MAX_PLAYERS;;>;;;hook&form.OnPlayerConnect?playerid;;{;;iter::add,SAMP::Player,playerid@OnPlayerConnect;;};;;hook&form.OnPlayerDisconnect?playerid;;{;;iter::remove,SAMP::Player,playerid@OnPlayerConnect;;};;;public&task.PrintPlayers#1000;;{;;foreach.int&var,foreachtestvar,SAMP::Player->console.println("foreach test #4 {foreachtestvar}");;;};;console.println("========================== data.dpp ==========================");;;console.println.log("data.dpp is imported");;;using.data;;;new.str,scanftest1="ok";;new.str,scanftest2="ok";;new.str,scanftest3="ok";;new.str,scanftest4="ok";;new.int,scanftest5=2453;;new.int,scanftest6=2453;;;new.str,scanftest="sscanf-is-so-cool-1-2";;;data.sscanf(scanftest,scanftest1,scanftest2,scanftest3,scanftest4,scanftest5,scanftest6);;;console.println.log(scanftest1);;console.println.log(scanftest2);;console.println.log(scanftest3);;console.println.log(scanftest4);;console.cout(scanftest5);;console.cout(scanftest6);;;object,TestObj;;TestObj<-new.int,testvar=10;;;namespace,ObjectTest;;<;;object,TestObj;;>;;;ObjectTest::TestObj<-new.int,testvar=1;;;;;new.int,undeftest=1;;;if.equ,defined?undeftest,1->console.println.log("undeftest is defined");;;#undef:undeftest;;;if.equ,defined?undeftest,1->console.println.log("undeftest is defined *(again!*)");;;console.cout.log(10%3);;;console.println.log("Did this work?");;;system.rem("Testing doubles");;;const*new.double,pi=3.14159;;;console.cout(pi);;;new.double,doubletestvar=723.42;;;int*form.DoubleTest?arg;;{;;console.println.log("{arg@DoubleTest}");;return,1;;};;;user.DoubleTest(doubletestvar);;;console.cout(3.4+3.2);;console.cout(5+6);;console.cout(0.4+5);;console.cout.log(3+1.5);;console.cout.log(doubletestvar/pi);;;if.equ,3.4+3.2,6.6->console.println.log("3.4+3.2 and 6.6 are equal");;;const*new.char,character='a';;new.char,charvar='B';;new.str,charstrtest="Oh my god";;;console.println.log("{pi} {doubletestvar} {character} {charvar} {charstrtest}");;;double*form.DoubleTestFunction;;{;;return,9.87;;};;;char*form.CharTestFunction;;{;;return,'g';;};;;console.cout.log(DoubleTestFunction);;console.cout.log(CharTestFunction);;;typedef,const*new.int,constint;;;constint,typedeftest=1234234;;console.println.log("{typedeftest}");enum,WeekDays;;{;;monday=1;;tuesday=2;;thursday=3;;saturday=4;;};;;console.cout.log(WeekDays.monday);;console.cout.log(WeekDays.tuesday);;console.cout.log(WeekDays.thursday);;console.cout.log(WeekDays.saturday);;;console.println.log("enum test included");;console.cout.log(WeekDays.saturday+WeekDays.monday);;;;enum,Months;;{;;january=5;;february=6;;december=7;;};;;console.cout.log(Months.january);;console.cout.log(Months.february-Months.december);;console.cout.log(Months.january%WeekDays.monday);;;console.println("Test?");;;console.println.log(statictest);;console.println.log("LOCAL DEBUG: Tried to print the static var");;;int*form.StaticTest;;{;;static*new.str,statictest="Static works here";;console.println.log(statictest);;console.println.log("LOCAL DEBUG: Printed static var");;return,1;;};;user.StaticTest;;console.println.log("LOCAL DEBUG: Called statictest for the first time");;console.println.log(statictest);;console.println.log("LOCAL DEBUG: Printed static again");;user.StaticTest;;console.println.log("LOCAL DEBUG: Called statictest for the second time");;;new.int.unsigned,unsignedinteger=-3645;;console.cout(unsignedinteger);;new.int.unsigned,anotherunsignedint=9823;;console.cout(anotherunsignedint);